---
- name: Set hub nfs fact
  ansible.builtin.set_fact:
    _hub_nfs: '{{ hub_shared_data_path | default("") | length > 0 }}'

- name: Get the automation hub data volume information
  containers.podman.podman_volume_info:
    name: hub_data
  register: _data
  when: not _hub_nfs | bool

- name: Set hub data path fact
  ansible.builtin.set_fact:
    _hub_data_path: '{{ _hub_nfs | ternary(hub_data_dir, _data.volumes[0].Mountpoint) }}'

- name: Backup the automation hub postgresql database
  community.postgresql.postgresql_db:
    name: '{{ hub_pg_database }}'
    login_host: '{{ hub_pg_host }}'
    login_port: '{{ hub_pg_port }}'
    login_user: '{{ hub_pg_username }}'
    login_password: '{{ hub_pg_password }}'
    login_unix_socket: '{{ hub_pg_socket | default(omit) }}'
    target: '{{ ansible_user_dir }}/aap/backups/{{ hub_pg_database }}.pgc'
    target_opts: '--clean --create'
    state: dump
  run_once: true

- name: Archive the automation hub data
  ansible.containerized_installer.archive:
    path:
      - '{{ ansible_user_dir }}/.local/share/containers/storage/secrets'
      - '{{ ansible_user_dir }}/aap/backups/{{ hub_pg_database }}.pgc'
      - '{{ ansible_user_dir }}/aap/hub'
      - '{{ ansible_user_dir }}/aap/tls'
      - '{{ _hub_data_path }}'
    dest: '{{ ansible_user_dir }}/aap/backups/hub.tar.gz'
    mode: '0640'

- name: Download the automation hub tarball
  ansible.builtin.fetch:
    src: '{{ ansible_user_dir }}/aap/backups/hub.tar.gz'
    dest: '{{ hostvars["localhost"]["_backup_dir"] }}/hub_{{ inventory_hostname }}.tar.gz'
    flat: true
...
